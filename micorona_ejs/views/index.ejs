<!DOCTYPE html>
<html lang="en">
<head>
 <% include partials/head %>
<link rel="stylesheet" href="./stylesheets/map.css">    <!-- 원본 -->
<link rel="stylesheet" href="./stylesheets/style.css">    <!-- 원본 -->
    <meta name="naver-site-verification" content="bb1d3b405734a7132ed4bc73b5f695fa49dc11cd"/>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<title>우리동네코로나</title>
<meta http-equiv=”Refresh” content=”0; URL=http://www.micorona.site:8000”/>
<meta property="og:title" content="우리동네코로나"/>
<meta name="description" content="우리동네코로나 : 코로나바이러스의 국내 현황을 알려주는 지도 서비스입니다." />
<meta property="og:type" content="website" />
<meta property="og:description" content="우리동네코로나 : 코로나바이러스의 국내 현황을 알려주는 지도 서비스입니다." />
<meta property="og:url" content="http://www.micorona.site:8000" />
<meta name="Robots" content="INDEX, FOLLOW" />
<meta property="og:image" content="https://micorona.site/image/virus2.png">
<link rel="shortcut icon" href="https://micorona.site/image/virus.png">
<link rel="canonical" href="http://micorona.site:8000/">
<link href="https://fonts.googleapis.com/css?family=Gamja+Flower&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Noto+Sans+KR&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Lobster&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Abril+Fatface|Lobster&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Abril+Fatface|Lobster|Righteous&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Abril+Fatface|Lobster|Prata|Righteous&display=swap" rel="stylesheet">

</head>
<body>
<% include partials/menu %>

<div id="map" style="width:100%;height:100%;"></div>
<div id="menus" class="menuss">
    <ul>
        <!--    현황판 자료를 한번밖에 못 불러옴 왜지?
         $("#koreaInfected").text(result.result[0]);
         $("#koreaInfected").text(result.result[0]);
                      $("#infect").text(result.result[0]);
                      $("#koreaRecovered").text(result.result[1]);
                      $("#recover").text(result.result[1]);
                      $("#koreaDied").text(result.result[2]);
                      $("#dead").text(result.result[2]);
        -->
        <li style="color:red">사망 : <span id="dead"></span> </li>
        <li style="color:blue">완치 : <span id="recover"></span> </li>
            <li style="color:orange">확진 : <span id="infect"></span> </li>
        -->
    </ul>
</div>
<div id="pop_up">
    <div id="pop_up_header">코로나19 현황</div>
    <div id="pop_up_body">

        <p style="text-align: center; margin-top:2px; " ><span id="updatetime"></span> 기준 &nbsp;<span id="updateicon" style="border:0px; color:orange;"><span class="glyphicon glyphicon-refresh" style="border:0px;"></span></span></p>
        <p style="text-align: center; margin-top:2px; " > 질병관리본부 출처 &nbsp;</p>
        <div class="container-fluid bg-3 text-center">
            <div class="row">
                <div class="col-xs-4 col=sm-4 col-md-4 col-lg-4">
                    <div class="card">
                        <span class="card-header">
                            확진
                        </span>
                        <div class="card-body">
                            <span class="card-text"  id="koreaInfected"></span>
                            <!--             <span class="red">(<span id="koreaInfectedGap"></span> <span class="glyphicon glyphicon-circle-arrow-up"></span>)</span> -->
                        </div>
                    </div>
                </div>
                <div class="col-xs-4 col=sm-4 col-md-4 col-lg-4">
                    <div class="card">
                        <span class="card-header">
                            사망
                        </span>
                        <div class="card-body">
                            <span class="card-text" id="koreaDied" style="color: red"></span>
                            <!--             <span class="red">(<span id="koreaDiedGap"></span> <span class="glyphicon glyphicon-circle-arrow-up"></span>)</span> -->
                        </div>
                    </div>
                </div>
                <div class="col-xs-4 col=sm-4 col-md-4 col-lg-4">
                    <div class="card">
                        <span class="card-header">
                            완치
                        </span>
                        <div class="card-body">
                            <span class="card-text" id="koreaRecovered" style="color:green;"></span>
                            <!--             <span class="red">(<span id="koreaDiedGap"></span> <span class="glyphicon glyphicon-circle-arrow-up"></span>)</span> -->
                        </div>
                    </div>
                </div>
            </div>
        </div>



</div>

<div id="scrolling">
    <div id="pop_up_header">공지</div>
    <div id="pop_up_body">
        1. Micorona가 우리동네코로나로 바뀌었습니다. 앞으로 많은 이용 부탁드립니다. <br><br>
        2. 왼쪽위에 검색아이콘이 있습니다. 지역, 확진자 검색가능합니다   <br><br>
        3. 지도의 빈곳을 클릭하면 주변에 확진자 동선이 얼마나 되는지 나옵니다. 한번 눌러보세요! <br><br>
        4. 오른쪽 아래에 아이콘은 현재 자신의 위치 아이콘입니다. 기능상 완성되지 않아서 수정중입니다 조금만 기다려주세요! <br><br>

    </div>

</div>
    <div><button id="pop_up_close_btn">닫기</button></div>
</div>
<div id="pop_up_close">
</div>

<div id="menu_wrap" class="bg_white" style="display:none;">
        <ul id="placesList"></ul>
        <div id="pagination"></div>
    </div>
<img id="thispot" src="./img/thispot.png" onclick="geoLocation()"/>
<!-- <img id="sickperson" src="./img/sickperson.png"/> -->

<% include partials/foot %>
  <% include partials/script %>
  <script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=64fc44ee2d1f19b99a05f91bcd4c094e&libraries=clusterer,services"></script>
  <script>


      $("#pop_up_close").click(function() {
          $("#pop_up").css("display", "none");
          $("#pop_up_close").css("display", "none");
      });

      $("#pop_up_close_btn").click(function () {
          $("#pop_up").css("display", "none");
          $("#pop_up_close").css("display", "none");
      });

    $("#logo").hide();
    $("#search").css("display", "inline");
    $("#search").click(function(){
        $("#searchbar").fadeIn();
        $("#searchhint").slideDown();
        $("#keyword").val("").focus();
    });
    $("#searchoption").change(function(){
        if($("#searchoption").val()=="person") {
            $("#searchhint").slideDown();
            $("#keyword").attr("placeholder", "예) 31, 부산1, 사망2, ...");
        }
      else{
          $("#keyword").attr("placeholder", "장소를 입력해주세요");
          $("#searchhint").html("");
          $("#searchhint").slideUp();
      }
    });

    $("#search2").click(function(){
      removeMarker();
      $("#keyword").val("");
      $("#searchbar").fadeOut();
      $("#menu_wrap").fadeOut();
      $("#searchhint").slideUp();
    });
    var oldVal="";
    $("#keyword").on("propertychange change keyup paste input", function() {
        var currentVal = $(this).val();
        if(oldVal.length === currentVal.length){
            return;
        }
        if(currentVal == ""){
            $("#searchhint").html("");
        }
        else{
            if($("#menu_wrap").css("display")=='none' && $("#searchoption").val()=="person"){
                $("#searchhint").html("");
                matchHint(currentVal);
            }
        }
    });
    var tempDivs = [];
    function matchHint(text){
        tempDivs = [];
        $.get("./file/people.json", function(data){
            $(data.people).map(function(i, person){
                var newDiv = "";
                if(text==person.person){
                    if(!tempDivs.find(e => {if(person.person==e) return true;})){
                        tempDivs.push(person.person);
                        newDiv += "<div class='person' data-toggle='modal' data-target='#personModalCenter"+person.person+"' onclick='searchPerson(\""+person.person+"\")'>"+person.person+"번 <span class='detail'>"+person.etc.substring(0, 50)+"...</span></div>";
                        $("#searchhint").html(newDiv+$("#searchhint").html());
                    }
                }else if(text.match(person.person) || person.etc.match(text)){
                    if(!tempDivs.find(e => {if(person.person==e) return true;})){
                        tempDivs.push(person.person);
                        newDiv += "<div class='person' data-toggle='modal' data-target='#personModalCenter"+person.person+"' onclick='searchPerson(\""+person.person+"\")'>"+person.person+"번 <span class='detail'>"+person.etc.substring(0, 50)+"...</span></div>";
                        $("#searchhint").html($("#searchhint").html()+newDiv);
                    }
                }

            });

        });
    }
    $(document).keydown(function(event){
        var selectDiv = 0;
      if($("#searchbar").css("display")!="none" && event.keyCode=='13'){
        removeMarker();
        var keyword = $("#keyword").val();
        var searchoption = $("#searchoption").val();
        if(searchoption=="place"){  //장소 검색
          searchPlaces();
        }else{  //확진자 검색
            $("#searchhint").slideUp();
          if(/^[0-9]/.test(keyword)){
            $("#personModalCenter"+keyword.replace(/[^0-9]/g,"")).modal("show");
            searchPerson(keyword.replace(/[^0-9]/g,""));
          }else{
              keyword = keyword.substring(0, 2)+keyword.replace(/[^0-9]/g,"");
            $("#personModalCenter"+keyword).modal("show");
            searchPerson(keyword);
          }
        }
          //Not Yet
          // }else if($("#searchhint").css("display")!="none" && event.keyCode == '38'){
          // }else if($("#searchhint").css("display")!="none" && event.keyCode == '40'){
      }

    });
    var lat = 37.555800, lng = 126.969732;  //기본 위도 경도 : 서울역
    var locPosition = new kakao.maps.LatLng(lat, lng);
    navigator.geolocation.getCurrentPosition(function(position) {
      lat = position.coords.latitude, // 위도
      lng = position.coords.longitude; // 경도
            
      locPosition = new kakao.maps.LatLng(lat, lng);  
    });
    var map = new kakao.maps.Map(document.getElementById('map'), { 
        center : new kakao.maps.LatLng(lat, lng), 
        level : 7
    });
    var markers = [];
    var ps = new kakao.maps.services.Places();
    var infowindow = new kakao.maps.InfoWindow({
      map: map,
      position: locPosition,
      removable : true,
    });
    infowindow.close();

    function searchPlaces(){
      var keyword = $("#keyword").val();
      ps.keywordSearch(keyword, placesSearchCB);
    }
    function placesSearchCB(data, status, pagination) {
    if (status === kakao.maps.services.Status.OK) {
        $("#menu_wrap").fadeIn();
        displayPlaces(data);
        displayPagination(pagination);
    } else if (status === kakao.maps.services.Status.ZERO_RESULT) {
        alert('검색 결과가 존재하지 않습니다.');
        return;
    } else if (status === kakao.maps.services.Status.ERROR) {
        alert('검색 결과 중 오류가 발생했습니다.');
        return;
    }
  }

  function searchPerson(id){
    $("#searchbar").show();
    $("#menu_wrap").fadeIn();
    $("#searchoption").val("person").prop("selected", true);
    $("#keyword").attr("placeholder", "31, 부산1, 사망2, ...");
    $("#keyword").val(id);
    $("#searchhint").html("").hide();
    $.get("./file/position.json", function(data){
      var personData = $(data.positions).map(function(i, position){
        if(position.person==id || Number(position.person)==id){
          return {
            // title : position.date + " " + position.time +"\n" + position.loc,
            id : id,
            datetime : position.date + " " + position.time,
            location : position.loc,
            position : new kakao.maps.LatLng(Number(position.lat), Number(position.lng))
          };
        }
      });
      if(personData.length > 0){
        displayPerson(personData);
      }else{
        alert("확진자 경로가 존재하지 않습니다.");
        $("#menu_wrap").hide();
        return;
      }
      
    });
  }

  function displayPerson(person){
      var listEl = document.getElementById('placesList'), 
      menuEl = document.getElementById('menu_wrap'),
      fragment = document.createDocumentFragment(), 
      bounds = new kakao.maps.LatLngBounds(), 
      listStr = '';
      // var level = map.getLevel();

      removeAllChildNods(listEl);
      removeMarker();


      var linePath = [];
      for(var i=0; i<person.length; i++){
        var itemEl = getListPersonItem(i, person[i]);
        // var marker = addMarker(person[i], i, person[i].title);
        linePath.push(person[i].position);
        (function(position){
          // bounds.extend(person[i].position);

          itemEl.onmouseover =  function () {
            // map.setLevel(level);
            map.panTo(position);
          };
          itemEl.onclick = function(){
            // map.setLevel(level);
            map.panTo(position);
          };

        })(person[i].position)

        fragment.appendChild(itemEl);
      }
      listEl.appendChild(fragment);
      menuEl.scrollTop = 0;
      // map.setBounds(bounds);
      // level = map.getLevel();
      
      var polyline = new kakao.maps.Polyline({
        path: linePath, 
        strokeWeight: 5, 
        strokeColor: 'red', 
        strokeOpacity: 0.7, 
        strokeStyle: 'solid' 
      });

      polyline.setMap(map);

      $("#search2").click(function(){
          polyline.setMap(null); 
      });

      $("#keyword").change(function(){
          polyline.setMap(null); 
      });
  }


  function displayPlaces(places) {
      var listEl = document.getElementById('placesList'), 
      menuEl = document.getElementById('menu_wrap'),
      fragment = document.createDocumentFragment(), 
      bounds = new kakao.maps.LatLngBounds(), 
      listStr = '';
      var level = map.getLevel();
      
      removeAllChildNods(listEl);
      removeMarker();
      
      for ( var i=0; i<places.length; i++ ) {
          var placePosition = new kakao.maps.LatLng(places[i].y, places[i].x),
              marker = addMarker(placePosition, i, places[i].title), 
              itemEl = getListItem(i, places[i]);
          bounds.extend(placePosition);
          (function(marker, title, placePosition) {
              kakao.maps.event.addListener(marker, 'mouseover', function() {
                  displayInfowindow(marker, title);
              });
              kakao.maps.event.addListener(marker, 'mouseout', function() {
                  infowindow.close();
              });
              kakao.maps.event.addListener(marker, 'click', function() {
                  displayInfowindow(marker, title);
              });
              itemEl.onmouseover =  function () {
                  map.setLevel(level);
                  displayInfowindow(marker, title);
              };
              itemEl.onmouseout =  function () {
                  infowindow.close();
              };
              itemEl.onclick = function(){
                $("#searchbar").css("display", "none");
                $("#menu_wrap").css("display", "none");
                removeMarker();
                conditions(placePosition.getLat(), placePosition.getLng());
              };
          })(marker, places[i].place_name, placePosition);
          fragment.appendChild(itemEl);
      }
      listEl.appendChild(fragment);
      menuEl.scrollTop = 0;
      map.setBounds(bounds);
      level = map.getLevel();
  }
  
  function getListPersonItem(index, person){
    var el = document.createElement('li');
    var itemStr = '<span><a data-toggle="modal" data-target="#personModalCenter'+person.id+'"><img src="./img/sickperson.png" class="markerbgimg"></img><div>'+ (person.id)+"번 확진자 </a> "+ (index+1) + 
                ' STEP</div></span>' +
                  '<div class="info">' +
                  '   <div>' + person.datetime + '</div>'+
                  '   <h5>' + person.location +'</h5></div>';
    el.innerHTML = itemStr;
    el.className = 'item';
    return el;

  }

  function getListItem(index, places) {
      var el = document.createElement('li'),
      itemStr = '<span class="markerbg marker_' + (index+1) + '"></span>' +
                  '<div class="info">' +
                  '   <h5>' + places.place_name + '</h5>';
      if (places.road_address_name) {
          itemStr += '    <span>' + places.road_address_name + '</span>';
      } else {
          itemStr += '    <span>' +  places.address_name  + '</span></div>'; 
      }
      el.innerHTML = itemStr;
      el.className = 'item';
      return el;
  }
  function addMarker(position, idx, title) {

      var imageSrc = './img/marker_number.png',
          imageSize = new kakao.maps.Size(36, 37), 
          imgOptions =  {
              spriteSize : new kakao.maps.Size(36, 691), 
              spriteOrigin : new kakao.maps.Point(0, (idx*46)+10), 
              offset: new kakao.maps.Point(13, 37) 
          },
          markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),
              marker = new kakao.maps.Marker({
              position: position, 
              image: markerImage 
          });
      marker.setMap(map); 
      markers.push(marker);  
      return marker;
  }
  function removeMarker() {
      for ( var i = 0; i < markers.length; i++ ) {
          markers[i].setMap(null);
      }   
      markers = [];
  }
  function displayPagination(pagination) {
      var paginationEl = document.getElementById('pagination'),
          fragment = document.createDocumentFragment(),
          i; 
      while (paginationEl.hasChildNodes()) {
          paginationEl.removeChild (paginationEl.lastChild);
      }
      for (i=1; i<=pagination.last; i++) {
          var el = document.createElement('a');
          el.href = "#";
          el.innerHTML = i;
          if (i===pagination.current) {
              el.className = 'on';
          } else {
              el.onclick = (function(i) {
                  return function() {
                      pagination.gotoPage(i);
                  }
              })(i);
          }
          fragment.appendChild(el);
      }
      paginationEl.appendChild(fragment);
  }
  function displayInfowindow(marker, title) {
      var content = '<div style="padding:5px;z-index:1;">' + title + '</div>';
      infowindow.setContent(content);
      infowindow.open(map, marker);
  }
  function removeAllChildNods(el) {   
      while (el.hasChildNodes()) {
          el.removeChild (el.lastChild);
      }
  }
    var marker = new kakao.maps.Marker({ 
        position: map.getCenter() 
    }); 
    marker.setMap(map);
    kakao.maps.event.addListener(map, 'click', function(mouseEvent) {        
      
      locPosition = mouseEvent.latLng; 
      
      conditions(locPosition.getLat(), locPosition.getLng());
    });
    function geoLocation(){
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
            lat = position.coords.latitude, // 위도
            lng = position.coords.longitude; // 경도
            
            locPosition = new kakao.maps.LatLng(lat, lng);  
          });
        conditions(lat, lng);
        
      } else { 
          alert("현재 위치 사용 불가");
      }
    }
    $(".makeMarker .info").click(function(){
      $("this").hide();
    });
    function makeMarker(result, small, large, tempPosition){
      map.setLevel(7);
      map.panTo(tempPosition);

      content = '<div class="wrap makeMarker">' + 
                '    <div class="info">' + 
                '        <div class="title">' + result +
                '        </div>' + 
                '        <div class="body">' + 
                '            <div class="img">' +
                '                <img src="./img/mask_'+result+ '.png" width="73" height="70">' +
                '           </div>' + 
                '            <div class="desc">' + 
                '                <div class="ellipsis">반경 1키로 내 감염자 동선 '+small+'곳</div>' + 
                '                <div class="ellipsis">반경 5키로 내 감염자 동선 '+large+'곳</div>' + 
                '            </div>' + 
                '        </div>' + 
                '    </div>' +    
                '</div>';
        var marker = new kakao.maps.Marker({
          map: map,
          position: tempPosition,
          center : tempPosition,
          clickable: true
        });
        var overlay = new kakao.maps.CustomOverlay({
            content: content,
            map: map,
            position: tempPosition,
            clickable: true,
            removable: true
        });
        $(".makeMarker .info").click(function(){
          overlay.setMap(null);
        });
    }
    
    function conditions(lat, lng){
      var tempPosition = new kakao.maps.LatLng(lat, lng);
      var small = 0; //반경 1키로 이내
      var large = 0; //반경 5키로 이내
      $.get("./file/position.json", function(data){
         $(data.positions).map(function(i, position){
          var dist = distance(lat, lng, position.lat, position.lng);
            if( dist < 5){
              large++;
              if( dist < 1){
                small++;
              }
            }
         });
        var result, message;
        if(small*5 + large*1 < 5){
          result = "좋음";
        }else if(small*5 + large*1 < 10){
          result = "주의";
        }else{
          result = "심각";
        }
        // console.log(lat, lng, result, small, large);
        makeMarker(result, small, large, tempPosition);
      });
    }
    function distance(lat1, lng1, lat2, lng2){
      lat1 = Number(lat1), lng1 = Number(lng1), lat2 = Number(lat2), lng2 = Number(lng2);
      var distLat = 69.1 *(lat2 - lat1);
      var distLng = 53 * (lng2 - lng1);
      var distance = Math.sqrt(distLat*distLat + distLng*distLng);
      return distance*1.609; 
    }
    var zoomControl = new kakao.maps.ZoomControl();
    map.addControl(zoomControl, kakao.maps.ControlPosition.TOPRIGHT);
    var clusterer = new kakao.maps.MarkerClusterer({
        map: map,
        minLevel: 8,
        calculator: [20, 50],
        averageCenter: true,
        styles: [{
          width : '50px', height : '50px',
          background: 'rgba(255, 225, 0, .8)',
          borderRadius: '40px',
          color: '#000',
          textAlign: 'center',
          fontWeight: 'bold',
          lineHeight: '41px'
        },
        {
          width : '60px', height : '60px',
          background: 'rgba(255, 127, 0, .8)',
          borderRadius: '50px',
          color: '#000',
          textAlign: 'center',
          fontWeight: 'bold',
          lineHeight: '51px'
        },
        {
          width : '80px', height : '80px',
          background: 'rgba(255, 0, 0, .8)',
          borderRadius: '60px',
          color: '#000',
          textAlign: 'center',
          fontWeight: 'bold',
          lineHeight: '61px'
        }]
    });
    var dangerImage = "./img/dangerspot.png";
    var imageSize = new kakao.maps.Size(50, 55);
    var markerImage = new kakao.maps.MarkerImage(dangerImage, imageSize);
    $.get("./file/position.json", function(data){
        var dangerMarkers = $(data.positions).map(function(i, position){
            var marker_danger = new kakao.maps.Marker({
              map: map,
              position : new kakao.maps.LatLng(Number(position.lat), Number(position.lng)),
              title: position.loc+"\n"+position.date+" "+ position.time + "에 " +position.person+"번 확진자",
              image: markerImage,
              clickable: true,
            });
            // marker_danger.setMap(map);
            var contents = "<div class='infowindo'><h4>" + position.loc + "</h4><p>"+position.date+" "+ position.time + "에 <a data-toggle='modal' data-target='#personModalCenter"+position.person+"'>"+ position.person+"번 확진자</a></p></div>";
            // console.log(contents);
            var infoWindow  = new kakao.maps.InfoWindow({
              content: contents,
              removable : true,
              clickable: true
            });
            kakao.maps.event.addListener(marker_danger, 'click', function(){
              infoWindow.open(map, marker_danger);
            });
            return marker_danger;
        });
        clusterer.addMarkers(dangerMarkers);
    });

    var nowperson;
    function searchNowPerson(){
      searchPerson(nowperson);
    }

    $.get("./file/people.json", function(data){
      $(data.people).map(function(i, person){

        nowperson = person.person;
        var modal = '<div class="modal fade" id="personModalCenter'+ person.person +'" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">' +
          '<div class="modal-dialog modal-dialog-centered" role="document">' +
            '<div class="modal-content">' +
              '<div class="modal-header">' +
                '<h4 class="modal-title" id="exampleModalLongTitle"><img src="./img/sickperson.png"> '+person.person+'번 확진자 <a onclick="searchPerson(\''+person.person+'\')"  data-dismiss="modal"> ▶ 동선</a></h4>' +
                '<button type="button" class="close" data-dismiss="modal" aria-label="Close">' +
                '</button>'+
              '</div>'+
              '<div class="modal-body">'+
                    '<div class="modaldiv">'+
                      '<div>'+person.age+'세 '+person.country + " " + person.sex +'</div>'+
                      '<div>'+ person.date +'에 확진</div>'+
                        '<div>'+person.step+'자로 '+person.hospital+'에서 '+person.state+'</div>';
                      if(person.etc != ""){
                          modal += '<hr><div style="font-size:0.92em;">'+ person.etc +'</div>';
                      }
                      modal +=  '</div>'+
              '</div>'+
              '<div class="modal-footer">'+
                '<button type="button" class="btn btn-warning" data-dismiss="modal">Close</button>'+
              '</div>'+
            '</div>'+
          '</div>'+
        '</div>';

        $("body").append(modal);

      }); 
    });

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ////////////////////////////////////////////////////////////////////////        DATAS부분을 INDEX에 이식함        //////////////////////////////////////////////////////////////////////////////////
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      $(function(){

          function digit(num){
              return ("0" + num).slice(-2);
          }

          function getDateTime(){
              var date = new Date();
              var text = date.getFullYear() + "-" + digit(date.getMonth()+1) + "-" + digit(date.getDate()) +" "+digit(date.getHours()) + ":"+digit(date.getMinutes()) + ":" + digit(date.getSeconds());
              $("#updatetime").text(text);
          }

          function getKoreaData(){

              $.ajax({
                  url:'/getKoreaData',
                  methode : "GET",
                  data: {data:"request"},
                  dataType: 'json',
                  beforeSend: function(){
                      $("#updateicon").html("<span class='fa fa-refresh fa-spin' role='status'><span class='sr-only'>불러오는 중...</span></span>");
                  },
                  success: function(result){
                      $("#koreaInfected").text(result.result[0]);
                      $("#infect").text(result.result[0]);
                      $("#koreaRecovered").text(result.result[1]);
                      $("#recover").text(result.result[1]);
                      $("#koreaDied").text(result.result[2]);
                      $("#dead").text(result.result[2]);
                      getDateTime();
                  },
                  error: function(){
                      alert("에러! 계속 안 되면 apqk0216@gmail.com 으로 알려주세요!");
                  },
                  complete: function(){
                      $("#updateicon").html("<span class='glyphicon glyphicon-refresh'></span>");
                  }

              });

          }


          getKoreaData();
          var interval = setInterval(function(){
              getKoreaData();
          }, 60000);

          $("#updateicon").click(function(){
              clearInterval(interval);
              getKoreaData();
              interval = setInterval(function(){getKoreaData();}, 60000);
          });

          $(window).resize(function(){
              sizeMake();
          });
        /* 팝업창 사이즈부분 */
          var width, height;
          function sizeMake(){
              width = $(window).width();
              heigth = $(window).height();


              var font_size = width/10;
              $(".row div").css("font-size", font_size/10);
              $(".card-body ").css("font-size", font_size/3);

              $(".red h1").css("font-size", font_size/8);
              $("h4").css("font-size", font_size/2.5);
              $("#nations").css("font-size", font_size/4);
              $("#viewtype").css("font-size", font_size/3);
              $(".criteria").css("font-size", font_size/5);

          }

          sizeMake();


          // $(".lastupdate").text($("#update").text());

          var date = [];
          var colsEng = [
              'Total', 'China', 'Korea',
              'HongKong', 'Taiwan', 'Macao', 'Thiland',
              'Singapore', 'Japan', 'Vietnam', 'Nepal',
              'Malaysia', 'Cambodia', 'SirLangKa', 'UAE',
              'India', 'Philippine', 'Iran', 'Lebanon', 'Israel', 'Kuwait',
              'USA', 'Canada',
              'France', 'Germany', 'Finland', 'Italy',
              'UK', 'Russia', 'Sweden', 'Spain',
              'Belgium', 'Australia', 'Egypt'
          ];
          var colsKor = [
              '전세계', '중국', '한국',
              '홍콩', '태국', '마카오', '대만',
              '싱가포르', '일본', '베트남', '네팔',
              '말레이시아', '캄보디아', '스리랑카', '아랍에미리트',
              '인도', '필리핀', '이란', '레바논', '이스라엘', '쿠웨이트',
              '미국', '캐나다',
              '프랑스', '독일', '핀란드', '이탈리아',
              '영국', '러시아', '스웨덴', '스페인',
              '벨기에', '호주', '이집트'
          ];

          var len = colsEng.length;
          var data = new Array(len);
          var dataDied = new Array(len);
          var dataGap;
          var latestdata = [];
          var dataWorld, layoutWorld, viewtypeWorld;

          $("#viewtype").change(function(){

              viewtypeWorld = $("#viewtype").val();

              layoutWorld = {
                  width: width,
                  height: height,
                  // title: '코로나19 전세계 지도',
                  geo: {
                      projection: {
                          type: viewtypeWorld
                      }
                  },

              };
              // console.log(dataWorld);
              Plotly.newPlot("worldView", dataWorld, layoutWorld, {showLink: true, resize: true});
          });


          Plotly.d3.csv("./file/corona.csv", function(data){ processData(data) });

          function changeGap(e, d){
              if(d==0){
                  $(e).parent().removeClass().addClass("green");
                  $(e).next().removeClass().addClass("glyphicon glyphicon-minus-sign");
              }else{
                  $(e).parent().removeClass().addClass("red");
                  $(e).next().removeClass().addClass("glyphicon glyphicon-circle-arrow-up");
              }
              $(e).text(d);
          }


          function nationData(nation){
              var index = colsEng.indexOf(nation);
              $(".nation").text(colsKor[index]);
              var len = data[index].length;
              $("#nationInfected").text(data[index][len-1]);
              $("#nationDied").text(dataDied[index][len-1]);
              // $("#nationInfectedGap").text(dataGap[nation]);
              // $("#nationDiedGap").text(dataGap[nation+"Died"]);
              changeGap("#nationInfectedGap", dataGap[nation]);
              changeGap("#nationDiedGap", dataGap[nation+"Died"]);
              var trace = [{
                  type : 'bar',
                  x : date,
                  y : data[index],
                  name : colsKor[index] +" 감염자수"
              },
                  {
                      type : 'bar',
                      x : date,
                      y : dataDied[index],
                      name : colsKor[index] +" 사망자수"
                  }];

              var layout = {
                  title : colsKor[index] +" 감염자 및 사망자 그래프",
                  height: height,
                  width: width,
                  showlegend: false
              };

              Plotly.newPlot("korea", trace, layout);
          }


          function processData(allRows){

              var lastindex = allRows.length-1;
              var options = "";
              var traceAll = [];


              // var tables = "<thead><tr><th>날짜</th>";

              // for(var i=0; i<colsEng.length;i++){
              //   // tables += "<th>"+colsKor[i]+"</th>";
              // }

              // tables += "</tr></thead><tbody>";
              for (var i=0; i<=lastindex; i++){
                  if(i == lastindex) {
                      dataGap = row;
                  }
                  row = allRows[i];
                  date.push(row['Date']);
                  // tables += "<tr><th>"+ row['Date'] +"</th>";
                  for(var j=0; j<len;j++){
                      if(data[j] == null){ data[j] = []; dataDied[j] = [];}
                      data[j].push(row[colsEng[j]]);  //j번째 국가의 감염자수의 i번째 데이터
                      if(i==lastindex) latestdata.push(row[colsEng[j]]);
                      dataDied[j].push(row[colsEng[j]+"Died"]);  //j번째 국가의 사망자수의 i번째 데이터
                      // tables += "<td>"+ row[colsEng[j]] + "</td>";
                      if(i == lastindex) {
                          dataGap[colsEng[j]] = row[colsEng[j]] - dataGap[colsEng[j]];
                          dataGap[colsEng[j]+"Died"] = row[colsEng[j]+"Died"] - dataGap[colsEng[j]+"Died"];
                      }
                  }
                  // tables += "</tr>";
                  latestdata = latestdata.slice(1, len);
                  // console.log(latestdata);

              }


              // $("#totalDied").text(row['TotalDied']);
              // $("#totalInfected").text(row['Total']);
              $("#nationDied").text(row['TotalDied']);
              $("#nationInfected").text(row['Total']);
              // $("#totalDiedGap").text(dataGap['TotalDied']);
              // $("#totalInfectedGap").text(dataGap['Total']);
              // $("#nationDiedGap").text(dataGap['KoreaDied']);
              // $("#nationInfectedGap").text(dataGap['Korea']);

              // changeGap("#totalDiedGap", dataGap['TotalDied']);
              // changeGap("#totalInfectedGap", dataGap['Total']);
              changeGap("#nationDiedGap", dataGap['TotalDied']);
              changeGap("#nationInfectedGap", dataGap['Total']);


              // console.log(dataGap);

              // for(var j=0; j<len; j++){
              //   latestdata.push({"num": j, "name": colsKor[j],
              //     "infected": Number(data[j][lastindex]),
              //     "died": Number(dataDied[j][lastindex])});
              // }

              // latestdata.sort(function(a, b){
              //   return a["infected"] > b["infected"] ? -1: a["infected"] < b["infected"] ? 1:0;
              // });

              // var tables = "<table class='table table-striped'><thead><tr><th>국가</th><th>감염자수</th></tr></thead><tbody>";

              for(var i=0; i<len; i++){
                  if(colsEng[i]==='Total'){
                      options += "<option value='"+colsEng[i]+"' selected>"+colsKor[i]+"</option>";
                  }
                  else{
                      options += "<option value='"+colsEng[i]+"'>"+colsKor[i]+"</option>";
                  }
                  // traceAll.push({
                  //   x : date,
                  //   y : data[latestdata[i]["num"]],
                  //   name : latestdata[i]["name"] + "("+latestdata[i]["infected"]+")"
                  // });


                  // tables += "<tr><th>"+ latestdata[i].name+"</th><td>"+latestdata[i].infected+"</td></tr>";
              }

              // tables += "</tbody></table>";

              $("#nations").html(options);

              // Plotly.newPlot("world", traceAll, {title:'전세계 감염자 그래프', height: height, width: width,showlegend: false});

              nationData('Total');
              $("#nations").change(function(){
                  nationData($(this).val());
              });

              // Plotly.d3.csv('./file/coronalatest.csv', function(err, rows){
              //   function unpack(rows, key) {
              //     return rows.map(function(row) {
              //       if(key=='Data')
              //         return Number(row[key]);
              //       else
              //         return  row[key];
              //     });
              //   }


              var colorbar = [];
              var datasorted = Array.from(new Set(latestdata));
              datasorted.sort(function(a, b){
                  return a-b;
              });
              var distcolor = Math.floor(255/datasorted.length);
              var maxdata = datasorted[datasorted.length-1];
              for(var i = 0; i<datasorted.length-3; i++){
                  var rgb = 255-distcolor*(i);
                  // rgb = Math.exp(rgb);
                  colorbar.push([Math.floor(datasorted[i]/maxdata*50000)/50000, "rgb("+(255)+", "+(rgb)+", "+(rgb)+")"]);
              }

              colorbar.push([1, "rgb(255, 0, 0)"]);

              // console.log(colorbar);
              dataWorld = [{
                  type: 'choropleth',
                  locationmode: 'country names',
                  locations: colsEng.slice(1, len),
                  z: latestdata,
                  text: colsKor.slice(1, len),
                  // autocolorscale: true,
                  zmin:0,
                  zmax: maxdata,
                  showscale: false,
                  colorscale: colorbar,
              }];

              width = $(window).width();
              height = $(window).height();

              if(width < height) {
                  viewtypeWorld = 'azimuthal equal area';
              }else if(width<786){
                  viewtypeWorld = 'equirectangular';
              }else{
                  viewtypeWorld = 'robinson';
              }

              $("#viewtype").val(viewtypeWorld);

              layoutWorld = {
                  width: width,
                  height: height,
                  // title: '코로나19 전세계 지도',
                  geo: {
                      projection: {
                          type: viewtypeWorld
                      }
                  },

              };
              // console.log(dataWorld);
              Plotly.newPlot("worldView", dataWorld, layoutWorld, {showLink: true, resize: true});
              // });

          }

      });

  </script>
  </body>
</html>